import random
import copy

class Card(object):
    """
    A generic Card class
    """
    
    ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 
             'Jack', 'Queen', 'King', 'Ace']
    suits = ['Spades', 'Clubs', 'Diamonds', 'Hearts']
    
    def __init__(self, rank, suit):
        self.rank = rank
        self.suit = suit
        
    def get_rank(self):
        return self.rank
    
    #   
    def get_suit(self):
        """
        Returns the value of the
        suit attribute
        """
        return self.suit

#   add __str__
    def __str__(self):
        return Card.ranks[self.rank] + ' of ' + Card.suits[self.suit]
    
class Deck(object):
    """
    A standard deck of 52 cards
    """
    
    def __init__(self):
        self.cards = []
        for rank in range(len(Card.ranks)):
            for suit in range(len(Card.suits)):
                self.cards.append(Card(rank, suit))

    #      
    def shuffle(self):
        """
        Use the random.shuffle method
        to randomly shuffle the list of cards.
        """
        return random.shuffle(self.cards)
        
        
    #   
    def pop_cards(self, n):
        """
        n, positive integer.
        Returns a list of n Card objects 
        at the end of self.cards, and 
        removes the returned cards from 
        self.cards.
        """
        popCards = []
        for i in range(n):
            popCards.append(self.cards[len(self.cards)-1])
            del self.cards[len(self.cards)-1]
        return popCards            
            
            
    def add_cards(self, cards):
        """
        cards, a list of Card objects.
        Extends self.cards with a
        deep copy of the cards parameter.
        Use the copy.deepcopy() method of 
        the Python's copy library.
        """
        self.cards.extend(copy.deepcopy(cards))
        
    #    
    def clear_cards(self):
        """
        Clears the content of self.cards. Be
        careful to NOT remove the entire attribute!
        """
        del self.cards[:]
        
    #   
    def move_cards(self, hand, n):
        """
        hand, a Hand object
        n, a positive integer
        Uses add_cards and pop_cards to 
        move n cards from self to hand
        """
        Deck.add_cards(hand,Deck.pop_cards(self,n))
        return hand
        
    def __str__(self):
        lst = [str(card) for card in self.cards]
        return '\n'.join(lst)
    
class Hand(Deck):
    """
    A generic Hand class
    """

    def __init__(self, name=""):
        self.cards = []
        self.name = name
        
    #   
    def get_name(self):
        """
        Return the value of the 
        name attribute
        """
        return self.name
        
    def __str__(self):
        return self.name + "'s Hand:\n" + Deck.__str__(self)

if __name__ == '__main__':    
    d = Deck()
    print(d)
    print()
    h = Hand()
    d.move_cards(h, 5)
    print(d)
    print()
    print(h)
    d.add_cards([Card(0, 0), Card(1, 1)])
    print(d) 
    print()
    d = Deck()
    h = Hand('Dealer')
    print(h)
    print()
    d.shuffle()
    d.move_cards(h, 3)
    print(h)
    
import copy
from Card import Card, Hand, Deck

class ThreeCardPokerDeck(Deck):
    """
    Three-Card Poker deck
    """
    
    def deal_hand(self, name="Anna"):
        """
        Creates a new instance of ThreeCardPokerHand
        hand and initializes it with 3 cards from the deck.
        An optional name argument can be used to specify the 
        name of the player.
        Returns the instance of ThreeCardPokerHand thus created
        """
        hand = ThreeCardPokerHand(self.pop_cards(3), name)
        return hand

class ThreeCardPokerHand(Hand):
    """
    Three-Card Poker hand
    """
    
    all_labels = ['Nothing', 'Pair', 'Flush', 'Straight', 'Three of a Kind',
                  'Straight Flush']
    
#   
    def _compute_rank(self):
        """
        self, this instance of ThreeCardPokerHand
        Computes the ranking of self and stores it 
        in the self.rank attribute according to the 
        rules described in Question 2 of the project brief.
        Returns None
        """
          
        card_values = [(self.ranks[0]),(self.ranks[1]),(self.ranks[2])]
        card_values.sort()
        if ((self.suits[0]==self.suits[1]==self.suits[2])
        and (
                (card_values[2]-card_values[1]==1 and card_values[1]-
                 card_values[0]==1) or(card_values[0]==2 and card_values[1]==3
                            and card_values[2]=='Ace'))):                 
            self.rank=5
        elif (self.ranks[0]==self.ranks[1]==self.ranks[2]):
            self.rank=4 
        elif  ((card_values[2]-card_values[1]==1 and card_values[1]-
                 card_values[0]==1) or(card_values[0]==2 and card_values[1]==3
                            and card_values[2]=='Ace')):
            self.rank=3         
        elif (self.suits[0]==self.suits[1]==self.suits[2]):                         
            self.rank=2
        elif (self.ranks[0]==self.ranks[1] or self.ranks[0]==self.ranks[2]
        or self.ranks[1]==self.ranks[2]):                               
            self.rank=1
        else:
            self.rank=0                              
                        

#      
    def _compare(self, other):
        """
        self, this instance of ThreeCardPokerHand
        other, an instance of ThreeCardPokerHand
        Implements the comparison rules for two ThreeCardPoker
        hands as per the description in Question 3 of the project brief.
        Returns -1 if self is a winning hand, 1 if other is the winning hand,
        and 0 if self and other are tied up.
        """
        card_values_self_ranks = [(self.ranks[0]),(self.ranks[1]),(self.ranks[2])]      
        card_values_self_ranks.sort()
        card_values_other_ranks = [(other.ranks[0]),(other.ranks[1]),(other.ranks[2])]      
        card_values_other_ranks.sort()
        if (self.rank > other.rank):
            return -1
        elif (self.rank < other.rank):
            return 1
        if ((self.rank==3 and other.rank==3) or (self.rank==5 and other.rank==5)):
            if (card_values_self_ranks[2] > card_values_other_ranks[2] and self.rank==3):
                return -1
            elif (card_values_self_ranks[2] < card_values_other_ranks[2] and self.rank==3):
                return 1
            else:
                return 0
        if (self.rank==other.rank):
            if (self.rank==other.rank==4):
                if(self.ranks[0] > other.ranks[0]):
                    return -1
                else:
                    return 1
        if(card_values_self_ranks[2]>card_values_other_ranks[2] and self.rank==5 
           and (card_values_self_ranks[2] != 'Ace' and 
                card_values_other_ranks[2] != 'Ace')):
            return -1
        elif(card_values_self_ranks[2] < card_values_other_ranks[2] and
             self.rank==3):
            return 1
        else:
            return 0                    
        
    def get_rank(self):
        """
        getter method for the 
        rank attribute
        Returns 0, 1, 2, 3, 4, 5 if the
        self's rank is respectively Nothing, 
        Pair, Flush, Straight, Three of a Kind, and Straight Flush
        """
        return self.rank
    

    def __init__(self, cards, name=""):
        Hand.__init__(self, name)
        self.cards = copy.deepcopy(cards)
        self.ranks = [card.get_rank() for card in self.cards]
        self.ranks.sort(reverse = True)
        self.suits = [card.get_suit() for card in self.cards]
        self._compute_rank()

    def __lt__(self, other):
        return True if self._compare(other) < 0 else False
    
    def __le__(self, other):
        return True if self._compare(other) <= 0 else False

#   
    def __gt__(self, other):
        """
        self, this instance of ThreeCardPokerHand
        other, an instance of ThreeCardPokerHand
        Returns True if self is the winning hand, False otherwise
        """
        return True if self._compare(other) > 0 else False
        pass
#      
    def __ge__(self, other):
        """
        self, this instance of ThreeCardPokerHand
        other, an instance of ThreeCardPokerHand
        Returns True if self is the winning hand or
        self and other are tied; False otherwise
        """
        return True if self._compare(other) >= 0 else False
    
#   
    def __eq__(self, other):
        """
        self, this instance of ThreeCardPokerHand
        other, an instance of ThreeCardPokerHand
        Returns True if self and other are tied; 
        False otherwise
        """
        return True if self._compare(other) == 0 else False

#     
    def __ne__(self, other):
        """
        self, this instance of ThreeCardPokerHand
        other, an instance of ThreeCardPokerHand
        Returns True if self and other are not tied; 
        False otherwise
        """
        return True if self._compare(other) != 0 else False

    def get_label(self):
        """
        self, this instance of ThreeCardPokerHand
        Returns a string representation of self.
        """
        return ThreeCardPokerHand.all_labels[self.rank]
    
    def get_full_label(self):
        """
        self, this instance of ThreeCardPokerHand
        Returns a string representation of self replacing
        the Nothing ranking with the highest ranking card.
        Used internally by __str__().
        """
        return  Card.ranks[self.ranks[0]] + '-High' if self.rank == 0 else \
            self.get_label()
        
    def __str__(self):
        """
        self, this instance of ThreeCardPokerHand
        Returns a string representation of self that 
        includes the list of the cards, and the rank.
        """
        return Hand.__str__(self) + '\nHand Rank: ' + self.get_full_label()
        
#          
if __name__ == '__main__':
    """
    Test cases
    """
    #Queen-high
    hand1 = ThreeCardPokerHand([Card(10, 0), Card(1, 1), Card(0, 2)])
    print(hand1)
    print()

   #Flush
    hand2 = ThreeCardPokerHand([Card(12, 0), Card(1, 0), Card(0, 0)])
    print(hand2)
    print()
    
    print(hand1 < hand2) # True
    print(hand1 > hand2) # False
    print(hand1 <= hand2) # True
    print(hand1 >= hand2) # False
    print(hand1 == hand2) # False
    print(hand1 != hand2) # True
    print()
    
#   3-Pair + Jack
    hand1 = ThreeCardPokerHand([Card(1, 0), Card(1, 1), Card(9, 2)])
    print(hand1)
    print()

#   2-Pair + Ace
    hand2 = ThreeCardPokerHand([Card(12, 0), Card(0, 1), Card(0, 0)])
    print(hand2)
    print()
    
    print(hand1 < hand2) # False
    print(hand1 > hand2) # True
    print(hand1 >= hand2) # True
    print(hand1 == hand2) # False
    print(hand1 != hand2) # True
    print(hand1 <= hand2) # False
    print()


    deck = ThreeCardPokerDeck()
    deck.shuffle()
    hand = deck.deal_hand()
    print(hand)

#   Straight Flush    
    print()
    hand3 = ThreeCardPokerHand([Card(0, 0), Card(1, 0), Card(12, 0)], 'Ruben')
    print(hand3)

#   Straight    
    print()
    hand3 = ThreeCardPokerHand([Card(0, 1), Card(12, 2), Card(1, 0)], 'Greg')
    print(hand3)  

#   Straight Flush    
    print()
    hand3 = ThreeCardPokerHand([Card(12, 1), Card(10, 1), Card(11, 1)], 'Dealer')   
    print(hand3)                      
    
#   Flush
    print()
    hand3 = ThreeCardPokerHand([Card(0, 1), Card(1, 1), Card(11, 1)], 'Player')   
    print(hand3)                      
    
from PokerHand import ThreeCardPokerDeck, ThreeCardPokerHand
from Card import Card

# 
def make_dist(n):
    """
    n, a positive integer
    Runs n trials of comprising of dealing 
    a Three-Card Poker hand from a randomly shuffled
    deck, and summarizing the percentage probabilities 
    of the possible hand ranks represented as strings.
    Returns a dictionary mapping the hand tring labels to 
    float percentages.
    """
           
    my_dict = {key:0 for key in ThreeCardPokerHand.all_labels}
    for i in range(n):
        
        deck = ThreeCardPokerDeck()
        deck.shuffle()
        hand = deck.deal_hand()

        hand_rank = hand.get_label()
        
        my_dict[hand_rank] += 1

    for label, total_count in my_dict.items():
        percentage = (float(total_count)/float(n)) * 100
        
        my_dict[label] = percentage
    
    return my_dict

                

# A ThreeCardPokerHand object initialized with the 
# smallest hand that can be played by the dealer. 
# Use it to determine if the dealer's hand can play
# in your play_round code 
min_dealer_hand = ThreeCardPokerHand([Card(10, 0), Card(1, 1), Card(0, 2)])

# 
def play_round(dealer_hand, player_hand, cash, get_ante, is_playing):
    """
    dealer_hand, an instance of ThreeCardPokerHand holding the
    hand dealt to the dealer at the beginning of the round
    player_hand, an instance of ThreeCardPokerHand holding the
    hand dealt to the dealer at the beginning of the round
    cash, a positive integer, the amount of cash available to the 
    player at the beginning of the round
    get_ante, a function, takes cash as argument and returns 
    the player's ante bet
    is_playing, a function, takes the player's hand as arugment
    and returns True if the player plays, and False if the player folds.
    Returns: tuple (ante, outcome), ante is the ante bet
    returned by get_ante, and outcome is  
    -2 if the dealer qualifies, the player plays and loses,
    -1 if the player folds
    0 if the dealer qualifies, the player plays, and the hands tie up
    1 if the dealer does not qualify, and the player plays.
    """
    ante = get_ante(cash)
    play = is_playing(player_hand)
    
    if (dealer_hand > player_hand and play == True):
        return (ante,-2)
    elif (dealer_hand < player_hand and play == True ):
        return (ante,2)
    elif (dealer_hand >= min_dealer_hand and play == False):
        return (ante,-1)
    elif (dealer_hand >= min_dealer_hand and dealer_hand == player_hand):       
        return (ante,0)
    elif (dealer_hand < min_dealer_hand and play == False ):
        return (ante,1)
   
    
#
##
def get_ante(cash):
    """
    A sample get_ante function.
    Feel free to customize as needed
    """
    return int(input('Enter your ante bet (Cash=' + str(cash) + '): '))
    
def is_playing(player_hand):
    """
    A sample is_playing function.
    Feel free to customize as needed.
    """
    print(player_hand)
    return True if input("Play or fold  (p/f): ") == 'p' else False

def proc_outcome(outcome, ante, dealer_hand):
    """
    A sample function to process the outcome
    of the round. 
    Feel free to customize as needed.
    """
    out = ['Tie', 'Dealer does not qualify', 'You won', 'You lost', 'You folded']
    payoff = outcome * ante
    print(dealer_hand)
    print(out[outcome] + ': ' + ('+' if payoff > 0 else '') + str(payoff))
    return payoff
#
def play(trials, stake, goal):
    """
    trials, positive integer, the number of trial game runs
    stake, positive integer, the initial amount of cash available to the player
    goal, the amount of cash the player is hoping to have by the end of each trial game
    Runs the trials number of trial games of Three-Hand Poker. Each trial run
    proceeds as long as the amount of cash available to the player is 
    both positive and below the goal. Each round is implemented by 
    calling the play_round() function below. 
    Prints various stats upon termination.
    """
    wins, gain, rounds, win_rounds, tie_rounds, lose_rounds = 0, 0, 0, 0, 0, 0
    for _ in range(trials):
        cash = stake
        while cash > 0 and cash < goal:
            deck = ThreeCardPokerDeck()
            deck.shuffle()
            player_hand = deck.deal_hand("Player")
            dealer_hand = deck.deal_hand("Dealer")
#           Invoke your implementation of play_round
            (ante, outcome) = \
                play_round(dealer_hand, player_hand, cash, get_ante, is_playing)
            cash += proc_outcome(outcome, ante, dealer_hand)
            rounds += 1
            win_rounds += 1 if outcome > 0 else 0
            tie_rounds += 1 if outcome == 0 else 0
            lose_rounds += 1 if outcome < 0 else 0
        wins += 1 if cash >= goal else 0
        gain += cash - stake
    print('Finished', trials, 'trial games')
    print('Winning games (%)', 100 * wins / trials)
    print('Average gain per game', gain / trials)
    print('Average number of rounds per game:', rounds / trials)
    print('Average number of winning rounds per game:', win_rounds / trials)
    print('Average number of tied rounds per game:', tie_rounds / trials)
    print('Average number of losing rounds per game:', lose_rounds / trials)
#
if __name__ == '__main__':
#   Estimate Three-Card Poker hand probabilities by running 
#   10000 random hand deals
    print(make_dist(10000))
    
   #This will play a single game of Three-Card Poker with the
   #initial stake of 100, and a goal to turn it into 200.
    play(1, 100, 200)
     
